// ======================================
// 
//        Functions - Utilities 
//
// ======================================


// Replace `$search` with `$replace` in `$string`
// @author Hugo Giraudel
// @param   {String} $string - Initial string
// @param   {String} $search - Substring to replace
// @param   {String} $replace ('') - New value
// @return  {String} - Updated string
@function str-replace($string, $search, $replace: '') {
  $index: str-index($string, $search);
  
  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
  }
  
  @return $string;
}


// Return matched string
// @author Yum
// @param   { String } $string - string
// @param   { String } $search - searching string
// @return  { String | null } - matched string 
@function str-match($string, $search) { 
  @if (str-index($string, $search)) {

    $start: str-index($string, $search);
    $end: $start + str-length($search) - 1; 
    $next-chr: str-slice(
      $string, 
      $end + 1, 
      $end + 1 
    );
    $suspect: str-slice($string, $start, $end);  

    @if ($suspect == $search and $next-chr != $search) { 
      @return $suspect; 
    } 

    @return str-match(str-slice($string, $end + str-length($search) + 1), $search);
  }

  @return null;
}


// Map deep get
// @author Hugo Giraudel
// @access public
// @param {Map} $map - Map
// @param {Arglist} $keys - Key chain
// @return {*} - Desired value
@function map-deep-get($map, $keys...) {
    @each $key in $keys {
        $map: map-get($map, $key);
    }
    @return $map;
}


/// Deep set function to set a value in nested maps
/// @author Hugo Giraudel
/// @access public
/// @param {Map} $map - Map
/// @param {List} $keys -  Key chaine
/// @param {*} $value - Value to assign
/// @return {Map}
@function map-deep-set($map, $keys, $value) {
  $maps: ($map,);
  $result: null;
  
  // If the last key is a map already
  // Warn the user we will be overriding it with $value
  @if type-of(nth($keys, -1)) == "map" {
    @warn "The last key you specified is a map; it will be overrided with `#{$value}`.";
  }
  
  // If $keys is a single key
  // Just merge and return
  @if length($keys) == 1 {
    @return map-merge($map, ($keys: $value));
  }
  
  // Loop from the first to the second to last key from $keys
  // Store the associated map to this key in the $maps list
  // If the key doesn't exist, throw an error
  @for $i from 1 through length($keys) - 1 {
    $current-key: nth($keys, $i);
    $current-map: nth($maps, -1);
    $current-get: map-get($current-map, $current-key);
    @if $current-get == null {
      @error "Key `#{$key}` doesn't exist at current level in map.";
    }
    $maps: append($maps, $current-get);
  }
  
  // Loop from the last map to the first one
  // Merge it with the previous one
  @for $i from length($maps) through 1 {
    $current-map: nth($maps, $i);
    $current-key: nth($keys, $i);
    $current-val: if($i == length($maps), $value, $result);
    $result: map-merge($current-map, ($current-key: $current-val));
  }
  
  // Return result
  @return $result;
}


// Unquote values in a given map
// @author Yum
// @access public
// @param {Map} $map - map
// @return {Map}
@function unquote-map-values($map) {
  @each $key in map-keys($map) {

    @if (type-of(map-get($map, $key)) == "map") {
      $map: map-deep-set($map, $key, unquote-map-values(map-get($map, $key)));
    }

    @if (
      type-of(map-get($map, $key)) == "string" 
      and map-get($map, $key) != ""
    ) {
      $map: map-deep-set($map, $key, unquote(map-get($map, $key)));
    }
  }
  @return $map;
}


// Remove block prefix from string
// @access  public
// @author  Yum<ym.jsng@gmail.com>
// @param   {String} a selector string
// @return  {String} the string removed it's block prefix 
@function remove-block-prefix($selector-string) {
  @each $prefix in bem-sass-get("logged-prefixes") {
    @if (str-index($selector-string, $prefix) == 2) {
      @return str-replace($selector-string, "." + $prefix, "."); // . to remove only the first match
    }
  }
  @return $selector-string;
} 

@function count-values($list) {
  $keys   : ();
  $counts : ();

  @each $item in $list {
    $index: index($keys, $item);

    @if not $index {
      $keys   : append($keys, $item);
      $counts : append($counts, 1);
    }
    @else {
      $count  : nth($counts, $index) + 1;
      $counts : replace-nth($counts, $index, $count);
    }
  }

  @return zip($keys, $counts);
}
